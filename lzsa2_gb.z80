;
; LZSA2 decompression routine for Gameboy
; based on Z80 decompressor by spke (see below)
;
; ver. 20190826
;
; + No backword.
; + need 3bytes work area(lzsa_tmp).
; + how to use:
;    ld hl,LZSA2SourceAddress
;    ld de,DestinationAddress
;    call DecompressLZSA2
;
;--------------------------------------------------------------------------------------------------
;
;  Speed-optimized LZSA2 decompressor by spke (v.1 02-07/06/2019, 218 bytes)
;
;  The data must be compressed using the command line compressor by Emmanuel Marty
;  The compression is done as follows:
;
;  lzsa.exe -f2 -r <sourcefile> <outfile>
;
;  where option -r asks for the generation of raw (frame-less) data.
;
;  The decompression is done in the standard way:
;
;  ld hl,FirstByteOfCompressedData
;  ld de,FirstByteOfMemoryForDecompressedData
;  call DecompressLZSA2
;
;  Backward compression is also supported; you can compress files backward using:
;
;  lzsa.exe -f2 -r -b <sourcefile> <outfile>
;
;  and decompress the resulting files using:
;
;  ld hl,LastByteOfCompressedData
;  ld de,LastByteOfMemoryForDecompressedData
;  call DecompressLZSA2
;
;  (do not forget to uncomment the BACKWARD_DECOMPRESS option in the decompressor).
;
;  Of course, LZSA2 compression algorithm is (c) 2019 Emmanuel Marty,
;  see https://github.com/emmanuel-marty/lzsa for more information
;
;  Drop me an email if you have any comments/ideas/suggestions: zxintrospec@gmail.com
;
;  This software is provided 'as-is', without any express or implied
;  warranty.  In no event will the authors be held liable for any damages
;  arising from the use of this software.
;
;  Permission is granted to anyone to use this software for any purpose,
;  including commercial applications, and to alter it and redistribute it
;  freely, subject to the following restrictions:
;
;  1. The origin of this software must not be misrepresented; you must not
;     claim that you wrote the original software. If you use this software
;     in a product, an acknowledgment in the product documentation would be
;     appreciated but is not required.
;  2. Altered source versions must be plainly marked as such, and must not be
;     misrepresented as being the original software.
;  3. This notice may not be removed or altered from any source distribution.

;	DEFINE	BACKWARD_DECOMPRESS

LZSA_LDIR:	MACRO
	dec			bc
	inc			b
	inc			c
.loop\@:
	ld			a,[hl+]
	ld			[de],a
	inc			de
	dec			c
	jr			nz,.loop\@
	dec			b
	jr			nz,.loop\@
	ENDM


DecompressLZSA2:
											; A' stores next nibble as %1111.... or assumed to contain trash
											; B is assumed to be 0
	xor			a
	ld			b,a
	ldh			[lzsa_tmp],a
	jp			.ReadToken

.LongerMatch:
	ld			b,a
	ldh			a,[lzsa_tmp]
	ld			c,a
	rlca
	ld			a,b
	ldh			[lzsa_tmp],a
	ld			a,c
	jr			c,.LongerMatch_noUpdate

	ld			a,[hl]
	or			$F0
	ldh			[lzsa_tmp],a

	ld			a,[hl+]
	or			$0F
	swap		a

.LongerMatch_noUpdate:
	sub			$F0-9
	cp			15+9
	jr			c,.CopyMatch
											;inc a : jr z,LongMatch : sub #F0-9+1 : jp CopyMatch

.LongMatch:									;ld a,24 :
	add			a,[hl]
	inc			hl
	jr			nc,.CopyMatch
	ld			a,[hl+]
	ld			c,a
	ld			a,[hl+]
	ld			b,a
	jr			nz,.CopyMatch_useC
	pop			de
	ret


.ManyLiterals:
	ld			a,[hl+]
	add			a,18
	jr			nc,.CopyLiterals
	ld			a,[hl+]
	ld			c,a
	ld			a,b
	ld			b,[hl]
	inc			hl
	jr			.CopyLiterals_useBC

.MoreLiterals:
	ld			b,a
	ldh			a,[lzsa_tmp]
	ld			c,a
	rlca
	ld			a,b
	ldh			[lzsa_tmp],a
	ld			a,[hl+]
	ld			b,a
	ld			a,c
	jr			c,.MoreLiterals_noUpdate

	ld			a,[hl]
	or			$F0
	ldh			[lzsa_tmp],a

	ld			a,[hl+]
	or			$0F
	swap		a

.MoreLiterals_noUpdate:									;sub #F0-3 : cp 15+3 : jr z,ManyLiterals
	inc			a
	jr			z,.ManyLiterals
	sub			$F0-3+1

.CopyLiterals:
	ld			c,a
.CopyLiterals_useC:
	ld			a,b
	ld			b,0
.CopyLiterals_useBC:

	push		af
	LZSA_LDIR
	pop			af

	push		de
	bit			7,a
	jr			z,.CASE0xx
	jr			.CASE1xx

											; if "LL" of the byte token is equal to 0,
											; there are no literals to copy
.NoLiterals:
	ld			a,[hl+]
	push		de
	bit			7,a
	jr			nz,.CASE1xx

											; short (5 or 9 bit long) offsets
.CASE0xx:
	ld			d,$FF
	cp			%01000000
	jr			c,.CASE00x

											; "01x": the case of the 9-bit offset
.CASE01x:
	cp			%01100000
	rl			d

.ReadOffsetE:
	ld			e,[hl]
	inc			hl

.SaveOffset:
	ld			c,a
	ld			a,e
	ldh			[lzsa_tmpl],a
	ld			a,d
	ldh			[lzsa_tmph],a
	ld			a,c

.MatchLen:
	inc			a
	and			%00000111
	jp			z,.LongerMatch
	inc			a

.CopyMatch:
	ld			c,a
.CopyMatch_useC:
	push		hl
;	di
	add			sp,2
	pop			hl
	push		hl
	add			hl,de						;hl=src
	pop			de							;de=dst
	add			sp,-4
;	ei

	LZSA_LDIR

	pop			hl
	pop			af							;dummy

											; compressed data stream contains records
											; each record begins with the byte token "XYZ|LL|MMM"
.ReadToken:
	ld			a,[hl]
	and			%00011000
	jr			z,.NoLiterals

	cp			%00011000					; 00 has already been processed; this identifies the case of 11
	jr			z,.MoreLiterals
	rrca
	rrca
	rrca

	ld			c,a
	ld			a,[hl+]						; token is re-read for further processing

	push		af
	LZSA_LDIR
	pop			af
											; the token and literals are followed by the offset
	push		de
	bit			7,a
	jr			z,.CASE0xx

.CASE1xx:
	cp			%11000000
	jr			nc,.CASE11x

											; "10x": the case of the 5-bit offset
.CASE10x:
	ld			c,a
	ldh			a,[lzsa_tmp]
	ld			d,a
	rlca
	ld			a,b							;after LDIR, b must be 0.
	ldh			[lzsa_tmp],a
	jr			c,.CASE10x_noUpdate

	ld			a,[hl]
	or			$F0
	ldh			[lzsa_tmp],a

	ld			a,[hl+]
	or			$0F
	swap		a
	ld			d,a

.CASE10x_noUpdate:
	ld			a,c
	cp			%10100000
	rl			d
	dec			d
	dec			d
	jr			.ReadOffsetE

											; "00x": the case of the 5-bit offset
.CASE00x:
	ld			c,a
	ldh			a,[lzsa_tmp]
	ld			e,a
	rlca
	ld			a,b							;after LDIR, b must be 0.
	ldh			[lzsa_tmp],a
	jr			c,.CASE00x_noUpdate

	ld			a,[hl]
	or			$F0
	ldh			[lzsa_tmp],a

	ld			a,[hl+]
	or			$0F
	swap		a
	ld			e,a

.CASE00x_noUpdate:
	ld			a,c
	cp			%00100000
	rl			e
	jp			.SaveOffset

											; two remaining cases
.CASE11x:
	cp			%11100000
	jr			c,.CASE110

											; "111": repeated offset
.CASE111:
	ld			c,a
	ldh			a,[lzsa_tmpl]
	ld			e,a
	ldh			a,[lzsa_tmph]
	ld			d,a
	ld			a,c
	jp			.MatchLen

											; "110": 16-bit offset
.CASE110:
	ld			d,[hl]
	inc			hl
	jp			.ReadOffsetE


